/* Warning, this file is auto generated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct KeyPair KeyPair;
typedef struct Public Public;
typedef struct Secret Secret;
typedef struct Sig Sig;
typedef struct Message Message;


extern const uintptr_t BLS_PUBLICKEY_SERIALIZED_SIZE;

extern const uintptr_t BLS_SIGNATURE_SERIALIZED_SIZE;

intptr_t keypair_new(const uint8_t *seed, uintptr_t seed_len, KeyPair **out_ptr);

void keypair_free(KeyPair *keypair);

intptr_t keypair_sign(KeyPair *key_pair,
                      const uint8_t *msg_data,
                      uintptr_t msg_data_len,
                      uint8_t *out,
                      uintptr_t out_len);

intptr_t public_new_from_bytes(const uint8_t *data, uintptr_t len, Public **out_ptr);

intptr_t public_new_from_keypair(const KeyPair *key_pair, Public **out_ptr);

intptr_t public_serialize(const Public *public_, uint8_t *out, uintptr_t out_len);

void bls_public_free(Public *public_);

intptr_t public_verify(const Public *public_,
                       const uint8_t *signature,
                       uintptr_t signature_len,
                       const uint8_t *msg_data,
                       uintptr_t msg_data_len,
                       bool *out);

intptr_t message_new_from_bytes(const uint8_t *msg_data, uintptr_t msg_data_len, Message **out_ptr);

void message_free(Message *msg);

intptr_t signature_new_from_bytes(const uint8_t *bytes, uintptr_t len, Sig **out_ptr);

void signature_free(Sig *sigs);

intptr_t aggeregated_verify(const Message *msg,
                            const Sig *const *signatures,
                            uintptr_t signatures_len,
                            const Public *const *publickeys,
                            uintptr_t publickeys_len,
                            bool *out);
