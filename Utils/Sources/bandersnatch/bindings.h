/* Warning, this file is auto generated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct Public Public;
typedef struct Secret Secret;


typedef struct Prover Prover;

typedef struct Verifier Verifier;

typedef struct CPublic {
  uint8_t _0[32];
} CPublic;

typedef struct CSecret {
  uint8_t _0[96];
} CSecret;

struct CPublic *public_deserialize_compressed(const uint8_t *data, uintptr_t len);

struct CSecret *secret_new_from_seed(const uint8_t *seed, uintptr_t seed_len);

const struct CPublic *secret_get_public(const struct CSecret *secret);

struct Prover *prover_new(const struct CPublic *ring,
                          uintptr_t ring_len,
                          uintptr_t prover_idx,
                          bool *success);

void prover_free(struct Prover *prover);

/**
 * out is 784 bytes
 */
bool prover_ring_vrf_sign(uint8_t *out,
                          const struct Prover *prover,
                          const uint8_t *vrf_input_data,
                          uintptr_t vrf_input_len,
                          const uint8_t *aux_data,
                          uintptr_t aux_data_len);

/**
 * out is 96 bytes
 */
bool prover_ietf_vrf_sign(uint8_t *out,
                          const struct Prover *prover,
                          const uint8_t *vrf_input_data,
                          uintptr_t vrf_input_len,
                          const uint8_t *aux_data,
                          uintptr_t aux_data_len);

struct Verifier *verifier_new(const struct CPublic *ring, uintptr_t ring_len, bool *success);

void verifier_free(struct Verifier *verifier);

/**
 * Ring Commitment: the Bandersnatch ring root in GP
 *
 * out is 144 bytes
 */
bool verifier_commitment(uint8_t *out, struct Verifier *verifier);

/**
 * out is 32 bytes
 */
bool verifier_ring_vrf_verify(uint8_t *out,
                              const struct Verifier *verifier,
                              const uint8_t *vrf_input_data,
                              uintptr_t vrf_input_len,
                              const uint8_t *aux_data,
                              uintptr_t aux_data_len,
                              const uint8_t *signature,
                              uintptr_t signature_len);

/**
 * out is 32 bytes
 */
bool verifier_ietf_vrf_verify(uint8_t *out,
                              const struct Verifier *verifier,
                              const uint8_t *vrf_input_data,
                              uintptr_t vrf_input_len,
                              const uint8_t *aux_data,
                              uintptr_t aux_data_len,
                              const uint8_t *signature,
                              uintptr_t signature_len,
                              uintptr_t signer_key_index);
