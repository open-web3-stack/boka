name: Coverage

on:
    push:
        branches: ["master"]
    pull_request:
        branches: ["master"]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    coverage:
        name: Code Coverage
        runs-on: [self-hosted, linux]
        timeout-minutes: 30
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  submodules: recursive
            - run: sudo apt-get update
            - uses: awalsh128/cache-apt-pkgs-action@latest
              with:
                  packages: librocksdb-dev libzstd-dev libbz2-dev liblz4-dev llvm
            # - name: Cache SPM
            #   uses: actions/cache@v4
            #   with:
            #     path: '**/.build'
            #     key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            #     restore-keys: |
            #       ${{ runner.os }}-spm-
            - name: Cache Cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            - name: Cache bandersnatch_vrfs static lib
              uses: actions/cache@v4
              with:
                  path: .lib/libbandersnatch_vrfs.a
                  key: ${{ runner.os }}-libs-libbandersnatch-${{ hashFiles('Utils/Sources/bandersnatch/**') }}
                  restore-keys: |
                      ${{ runner.os }}-libs-libbandersnatch
            - name: Cache bls static lib
              uses: actions/cache@v4
              with:
                  path: .lib/libbls.a
                  key: ${{ runner.os }}-libs-libbls-${{ hashFiles('Utils/Sources/bls/**') }}
                  restore-keys: |
                      ${{ runner.os }}-libs-libbls
            - name: Cache erasure-coding static lib
              uses: actions/cache@v4
              with:
                  path: .lib/libec.a
                  key: ${{ runner.os }}-libs-libec-${{ hashFiles('Utils/Sources/erasure-coding/**') }}
                  restore-keys: |
                      ${{ runner.os }}-libs-libec
            - name: Setup Swift
              uses: SwiftyLab/setup-swift@latest
            - name: Setup Rust
              uses: dtolnay/rust-toolchain@nightly
            - name: Build deps
              run: make deps
            - name: Test Coverage
              run: make test-coverage
            - name: Merge and generate coverage report
              run: |
                  llvm-profdata merge -sparse $(find . -type f -path '*/.build/*/debug/codecov/*.profdata') -o default.profdata
                  for file in **/Tests; do
                  # Get the BIN_PATH for the current subproject
                  BIN_PATH="$(swift build --show-bin-path --package-path "$(dirname "$file")")"
                  # Find all .xctest files in the current subproject
                  XCTEST_PATHS=$(find "${BIN_PATH}" -name '*.xctest')
                  # Iterate over each .xctest file found
                  for XCTEST_PATH in $XCTEST_PATHS; do
                      echo "Processing $XCTEST_PATH"
                      # Set the LLVM_COV tool and binary path
                      LLVM_COV='llvm-cov'
                      COV_BIN=$XCTEST_PATH
                      echo "Using COV_BIN: $COV_BIN"
                      # If on macOS, use xcrun to access llvm tools
                      # The file path is also different on macOS
                      if [[ "$OSTYPE" == "darwin"* ]]; then
                      f="$(basename $XCTEST_PATH .xctest)"
                      COV_BIN="${COV_BIN}/Contents/MacOS/$f"
                      LLVM_COV='xcrun llvm-cov'
                      fi
                      echo "Final COV_BIN: $COV_BIN"

                      # Export the code coverage for the current subproject and append to app.coverage.lcov
                      xcrun llvm-cov export "${COV_BIN}" \
                      -instr-profile=default.profdata \
                      -format lcov >> coverage.lcov \
                      -ignore-filename-regex=".build/repositories/*"
                  done
                  done
            - uses: codecov/codecov-action@v4
              with:
                  file: coverage.lcov
                  fail_ci_if_error: true # optional (default = false)
                  token: ${{ secrets.CODECOV_TOKEN }} # required
                  verbose: true # optional (default = false)
