// generated by polka.codes
#include "helper.hh"
#include <asmjit/x86.h>
#include <asmjit/asmjit.h>
#include <iostream>
#include <stdio.h>
#include <cstring>

using namespace asmjit;

int32_t compilePolkaVMCode_x64(
    const uint8_t* codeBuffer,
    size_t codeSize,
    uint32_t initialPC,
    uint32_t jitMemorySize,
    void** funcOut) {

    if (codeBuffer == nullptr || codeSize == 0) {
        std::cerr << "Error (x86_64): codeBuffer is null or codeSize is 0." << std::endl;
        return 1; // Invalid input error
    }
    if (funcOut == nullptr) {
        std::cerr << "Error (x86_64): funcOut is null." << std::endl;
        return 2; // Invalid output parameter
    }
    *funcOut = nullptr;

    JitRuntime rt;
    CodeHolder code;
    Environment env;

    env.setArch(asmjit::Arch::kX64);
    // TODO: Configure CPU features if targeting specific x86_64 extensions (AVX, etc.)

    Error err = code.init(env);
    if (err) {
        fprintf(stderr, "AsmJit (x86_64) failed to initialize CodeHolder: %s\n",
                DebugUtils::errorAsString(err));
        return err;
    }

    x86::Assembler a(&code);
    Label L_HostCallSuccessful = a.newLabel();
    Label L_HostCallFailedPathReturn = a.newLabel();

    // TODO: Implement full PolkaVM bytecode to x86_64 translation
    
    // Register usage for System V AMD64 ABI:
    // - rdi, rsi, rdx, rcx, r8, r9: Parameter registers (caller-saved)
    // - rax, r10, r11: Temporary registers (caller-saved)
    // - rbx, rbp, r12-r15: Callee-saved registers
    // - rsp: Stack pointer
    // - Return value in rax/eax

    // Example ECALL implementation
    if (codeSize > 0 && initialPC == 0) {
        std::cout << "JIT (x86_64): Simulating ECALL #1" << std::endl;
        uint32_t host_call_idx = 1;

        // Save JIT function arguments to callee-saved registers
        a.mov(x86::rbx, x86::rdi); // Save registers_ptr
        a.mov(x86::rbp, x86::rsi); // Save memory_base_ptr
        a.mov(x86::r12, x86::rdx); // Save memory_size
        a.mov(x86::r13, x86::rcx); // Save gas_ptr
        a.mov(x86::r14, x86::r8);  // Save initial_pvm_pc
        a.mov(x86::r15, x86::r9);  // Save invocation_context_ptr

        // Setup arguments for pvm_host_call_trampoline
        a.mov(x86::rdi, x86::r15);     // arg0: invocation_context_ptr
        a.mov(x86::esi, host_call_idx); // arg1: host_call_idx
        a.mov(x86::rdx, x86::rbx);     // arg2: guest_registers_ptr
        a.mov(x86::rcx, x86::rbp);     // arg3: guest_memory_base_ptr
        a.mov(x86::r8d, x86::r12d);    // arg4: guest_memory_size
        a.mov(x86::r9, x86::r13);      // arg5: guest_gas_ptr

        // Call trampoline using rax (temporary register)
        a.mov(x86::rax, reinterpret_cast<uint64_t>(pvm_host_call_trampoline));
        a.call(x86::rax); // Result returned in eax

        // Check for error (0xFFFFFFFF)
        a.cmp(x86::eax, 0xFFFFFFFF);
        a.jne(L_HostCallSuccessful);

        // Host call failed path
        a.mov(x86::eax, 1); // Return ExitReason.Panic
        a.jmp(L_HostCallFailedPathReturn);

        a.bind(L_HostCallSuccessful);
        // Store host call result to PVM_R0 (first element in registers array)
        a.mov(x86::ptr(x86::rbx), x86::eax);
    }

    // Default exit path
    a.mov(x86::eax, 0); // Return ExitReason.Halt
    a.bind(L_HostCallFailedPathReturn);
    a.ret();

    err = rt.add(reinterpret_cast<void**>(funcOut), &code);
    if (err) {
        fprintf(stderr, "AsmJit (x86_64) failed to add JITed code to runtime: %s\n", 
                DebugUtils::errorAsString(err));
        return err;
    }

    return 0; // Success
}
