// generated by polka.codes
#include "helper.hh"
#include <asmjit/x86.h>
#include <asmjit/asmjit.h>
#include <iostream>
#include <stdio.h>
#include <cstring>

using namespace asmjit;

// Static register mapping for x86_64
namespace {
    // VM state registers (using callee-saved registers)
    const x86::Gp VM_REGISTERS_PTR = x86::rbx;  // Guest VM registers array
    const x86::Gp VM_MEMORY_PTR = x86::r12;     // Guest VM memory base
    const x86::Gp VM_MEMORY_SIZE = x86::r13d;   // Guest VM memory size (32-bit)
    const x86::Gp VM_GAS_PTR = x86::r14;        // Guest VM gas counter
    const x86::Gp VM_PC = x86::r15d;            // Guest VM program counter (32-bit)
    const x86::Gp VM_CONTEXT_PTR = x86::rbp;    // Invocation context pointer
    
    // Temporary registers (caller-saved)
    const x86::Gp TEMP_REG0 = x86::rax;         // General purpose temp
    const x86::Gp TEMP_REG1 = x86::r10;         // General purpose temp
    const x86::Gp TEMP_REG2 = x86::r11;         // General purpose temp
    
    // Parameter registers (System V AMD64 ABI)
    const x86::Gp PARAM_REG0 = x86::rdi;        // First parameter
    const x86::Gp PARAM_REG1 = x86::rsi;        // Second parameter
    const x86::Gp PARAM_REG2 = x86::rdx;        // Third parameter
    const x86::Gp PARAM_REG3 = x86::rcx;        // Fourth parameter
    const x86::Gp PARAM_REG4 = x86::r8;         // Fifth parameter
    const x86::Gp PARAM_REG5 = x86::r9;         // Sixth parameter
}

int32_t compilePolkaVMCode_x64(
    const uint8_t* codeBuffer,
    size_t codeSize,
    uint32_t initialPC,
    uint32_t jitMemorySize,
    void** funcOut) {

    if (codeBuffer == nullptr || codeSize == 0) {
        std::cerr << "Error (x86_64): codeBuffer is null or codeSize is 0." << std::endl;
        return 1; // Invalid input error
    }
    if (funcOut == nullptr) {
        std::cerr << "Error (x86_64): funcOut is null." << std::endl;
        return 2; // Invalid output parameter
    }
    *funcOut = nullptr;

    JitRuntime rt;
    CodeHolder code;
    Environment env;

    env.setArch(asmjit::Arch::kX64);
    // TODO: Configure CPU features if targeting specific x86_64 extensions (AVX, etc.)

    Error err = code.init(env);
    if (err) {
        fprintf(stderr, "AsmJit (x86_64) failed to initialize CodeHolder: %s\n",
                DebugUtils::errorAsString(err));
        return err;
    }

    x86::Assembler a(&code);
    Label L_HostCallSuccessful = a.newLabel();
    Label L_HostCallFailedPathReturn = a.newLabel();

    // Function prologue - save callee-saved registers that we'll use
    a.push(VM_REGISTERS_PTR);  // rbx
    a.push(VM_CONTEXT_PTR);    // rbp
    a.push(VM_MEMORY_PTR);     // r12
    a.push(VM_MEMORY_SIZE.r64());  // r13
    a.push(VM_GAS_PTR);        // r14
    a.push(VM_PC.r64());       // r15
    
    // Initialize our static register mapping from function parameters
    // System V AMD64 ABI: rdi, rsi, rdx, rcx, r8, r9
    a.mov(VM_REGISTERS_PTR, PARAM_REG0);  // rdi: registers_ptr
    a.mov(VM_MEMORY_PTR, PARAM_REG1);     // rsi: memory_base_ptr
    a.mov(VM_MEMORY_SIZE, PARAM_REG2.r32());  // edx: memory_size
    a.mov(VM_GAS_PTR, PARAM_REG3);        // rcx: gas_ptr
    a.mov(VM_PC, PARAM_REG4.r32());       // r8d: initial_pvm_pc
    a.mov(VM_CONTEXT_PTR, PARAM_REG5);    // r9: invocation_context_ptr

    // Example ECALL implementation
    if (codeSize > 0 && initialPC == 0) {
        std::cout << "JIT (x86_64): Simulating ECALL #1" << std::endl;
        uint32_t host_call_idx = 1;

        // Setup arguments for pvm_host_call_trampoline using our static register mapping
        a.mov(PARAM_REG0, VM_CONTEXT_PTR);     // arg0: invocation_context_ptr
        a.mov(PARAM_REG1.r32(), host_call_idx); // arg1: host_call_idx
        a.mov(PARAM_REG2, VM_REGISTERS_PTR);   // arg2: guest_registers_ptr
        a.mov(PARAM_REG3, VM_MEMORY_PTR);      // arg3: guest_memory_base_ptr
        a.mov(PARAM_REG4.r32(), VM_MEMORY_SIZE);// arg4: guest_memory_size
        a.mov(PARAM_REG5, VM_GAS_PTR);         // arg5: guest_gas_ptr

        // Call trampoline using TEMP_REG0 (rax)
        a.mov(TEMP_REG0, reinterpret_cast<uint64_t>(pvm_host_call_trampoline));
        a.call(TEMP_REG0); // Result returned in eax (TEMP_REG0.r32())

        // Check for error (0xFFFFFFFF)
        a.cmp(TEMP_REG0.r32(), 0xFFFFFFFF);
        a.jne(L_HostCallSuccessful);

        // Host call failed path
        a.mov(TEMP_REG0.r32(), 1); // Return ExitReason.Panic
        a.jmp(L_HostCallFailedPathReturn);

        a.bind(L_HostCallSuccessful);
        // Store host call result to PVM_R0 (first element in registers array)
        a.mov(x86::ptr(VM_REGISTERS_PTR), TEMP_REG0.r32());
    }

    // Default exit path
    a.mov(TEMP_REG0.r32(), 0); // Return ExitReason.Halt
    a.bind(L_HostCallFailedPathReturn);
    
    // Function epilogue - restore callee-saved registers
    a.pop(VM_PC.r64());       // r15
    a.pop(VM_GAS_PTR);        // r14
    a.pop(VM_MEMORY_SIZE.r64());  // r13
    a.pop(VM_MEMORY_PTR);     // r12
    a.pop(VM_CONTEXT_PTR);    // rbp
    a.pop(VM_REGISTERS_PTR);  // rbx
    
    a.ret();

    err = rt.add(reinterpret_cast<void**>(funcOut), &code);
    if (err) {
        fprintf(stderr, "AsmJit (x86_64) failed to add JITed code to runtime: %s\n", 
                DebugUtils::errorAsString(err));
        return err;
    }

    return 0; // Success
}
