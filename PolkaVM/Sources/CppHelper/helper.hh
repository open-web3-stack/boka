// generated by polka.codes
// Bridge between Swift and C++ for JIT compilation using AsmJit on AArch64 and x86_64

#pragma once

#include <cstddef>
#include <cstdint>
#include <asmjit/asmjit.h>
#include <asmjit/a64.h>

#include "registers.hh"

// JIT instruction generation interface
// This is the C++ implementation of the JITInstructionGenerator protocol
namespace jit_instruction {
    // Control flow instruction generators

    // Generate gas accounting code
    bool jit_emitGasAccounting(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint64_t gas_cost,
        void* _Nonnull gas_ptr
    );

    // Generate trap instruction
    bool jit_generateTrap(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch
    );

    // Generate jump instruction
    bool jit_generateJump(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint32_t target_pc
    );

    // Generate jump indirect instruction
    bool jit_generateJumpIndirect(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint8_t reg_index
    );

    // Generate ecalli instruction (calls into host)
    bool jit_generateEcalli(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint32_t func_idx,
        void* _Nonnull gas_ptr
    );

    // Generate load immediate and jump
    bool jit_generateLoadImmJump(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint8_t dest_reg,
        uint32_t immediate,
        uint32_t target_pc
    );

    // Generate load immediate and jump indirect
    bool jit_generateLoadImmJumpInd(
        void* _Nonnull assembler,
        const char* _Nonnull target_arch,
        uint8_t dest_reg,
        uint32_t immediate,
        uint8_t jump_reg
    );
}

// Function signature matching JITHostFunctionFnSwift in ExecutorBackendJIT.swift
// Returns: 0xFFFFFFFF on error, otherwise host call result
typedef uint32_t (* _Nonnull JITHostFunctionFn)(
	void* _Nonnull ownerContext,
	uint32_t hostCallIndex,
	uint64_t* _Nonnull guestRegisters,
	uint8_t* _Nonnull guestMemoryBase,
	uint32_t guestMemorySize,
	uint64_t* _Nonnull guestGas,
	void* _Nullable invocationContext
);

// Table passed as `invocationContext` to JIT-compiled functions
struct JITHostFunctionTable {
    JITHostFunctionFn dispatchHostCall;
    void* _Nonnull ownerContext; // Opaque pointer to Swift ExecutorBackendJIT
    void* _Nullable invocationContext; // Opaque pointer to InvocationContext
};

// Trampoline for JIT code to call Swift host functions
// Returns: 0xFFFFFFFF on error, otherwise host call result (stored in PVM_R0)
uint32_t pvm_host_call_trampoline(
    JITHostFunctionTable* _Nonnull host_table,
    uint32_t host_call_index,
    uint64_t* _Nonnull guest_registers_ptr,
    uint8_t* _Nonnull guest_memory_base_ptr,
    uint32_t guest_memory_size,
    uint64_t* _Nonnull guest_gas_ptr);
