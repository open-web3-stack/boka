// generated by polka.codes
// This file implements the JITPlatformStrategy for Linux.

import Foundation
import TracingUtils
import Utils // For PvmConfig, JITError, Logger

// TODO: Ensure PvmConfig, JITError, Logger are accessible.

struct LinuxJITPlatformStrategy: JITPlatformStrategy {
    private let logger = Logger(label: "LinuxJITPlatformStrategy")

    func getCurrentTargetArchitecture(config _: PvmConfig) throws -> String {
        // Auto-detect native architecture for Linux
        #if arch(x86_64) && os(Linux)
            logger.debug("Auto-detected JIT target architecture for Linux: x86_64-unknown-linux-gnu")
            return "x86_64-unknown-linux-gnu"
        #elseif arch(arm64) && os(Linux) // For ARM64 Linux
            logger.debug("Auto-detected JIT target architecture for Linux: aarch64-unknown-linux-gnu")
            return "aarch64-unknown-linux-gnu"
        #else
            // Fallback for other Linux architectures - try to get it from uname
            var systemInfo = utsname()
            uname(&systemInfo)
            let machine = withUnsafePointer(to: &systemInfo.machine) {
                $0.withMemoryRebound(to: CChar.self, capacity: 1) {
                    String(cString: $0)
                }
            }
            let currentArch = "\(machine) on Linux"
            logger
                .error(
                    "JIT running on an unsupported Linux architecture ('\(machine)') for automatic detection."
                )
            throw JITError.targetArchUnsupported(arch: "Linux: \(currentArch)")
        #endif
    }
}
